/*
 * generated by Xtext
 */
parser grammar InternalUForthParser;

options {
	tokenVocab=InternalUForthLexer;
	superClass=AbstractInternalAntlrParser;
	
}

@header {
package ch.fhnw.mdt.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ch.fhnw.mdt.services.UForthGrammarAccess;

}

@members {


	private UForthGrammarAccess grammarAccess;
	 	
	public InternalUForthParser(TokenStream input, UForthGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "Forth";	
	} 
	   	   	
	@Override
	protected UForthGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleForth
entryRuleForth returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getForthRule()); }
	 iv_ruleForth=ruleForth 
	 { $current=$iv_ruleForth.current; } 
	 EOF 
;

// Rule Forth
ruleForth returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getForthAccess().getInstructionsGlobalInstructionParserRuleCall_0()); 
	    }
		lv_instructions_0_0=ruleGlobalInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForthRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_0_0, 
        		"GlobalInstruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleGlobalInstruction
entryRuleGlobalInstruction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getGlobalInstructionRule()); }
	 iv_ruleGlobalInstruction=ruleGlobalInstruction 
	 { $current=$iv_ruleGlobalInstruction.current; } 
	 EOF 
;

// Rule GlobalInstruction
ruleGlobalInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGlobalInstructionAccess().getFunctionParserRuleCall_0()); 
    }
    this_Function_0=ruleFunction
    {
        $current = $this_Function_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGlobalInstructionAccess().getInstructionParserRuleCall_1()); 
    }
    this_Instruction_1=ruleInstruction
    {
        $current = $this_Instruction_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Colon
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getColonKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getWordsInstructionParserRuleCall_2_0()); 
	    }
		lv_words_2_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"words",
        		lv_words_2_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleKeywords
entryRuleKeywords returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getKeywordsRule()); }
	 iv_ruleKeywords=ruleKeywords 
	 { $current=$iv_ruleKeywords.current; } 
	 EOF 
;

// Rule Keywords
ruleKeywords returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_name_0_1=
	SWAP
    {
        newLeafNode(lv_name_0_1, grammarAccess.getKeywordsAccess().getNameSWAPKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordsRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_1, null);
	    }

    |		lv_name_0_2=
	OVER
    {
        newLeafNode(lv_name_0_2, grammarAccess.getKeywordsAccess().getNameOVERKeyword_0_1());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordsRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_2, null);
	    }

    |		lv_name_0_3=
	NIP
    {
        newLeafNode(lv_name_0_3, grammarAccess.getKeywordsAccess().getNameNIPKeyword_0_2());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordsRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_3, null);
	    }

    |		lv_name_0_4=
	UNDER
    {
        newLeafNode(lv_name_0_4, grammarAccess.getKeywordsAccess().getNameUNDERKeyword_0_3());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordsRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_4, null);
	    }

    |		lv_name_0_5=
	TUCK
    {
        newLeafNode(lv_name_0_5, grammarAccess.getKeywordsAccess().getNameTUCKKeyword_0_4());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordsRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_5, null);
	    }

    |		lv_name_0_6=
	ROT
    {
        newLeafNode(lv_name_0_6, grammarAccess.getKeywordsAccess().getNameROTKeyword_0_5());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordsRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_6, null);
	    }

    |		lv_name_0_7=
	ROT_1
    {
        newLeafNode(lv_name_0_7, grammarAccess.getKeywordsAccess().getNameROTKeyword_0_6());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordsRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_7, null);
	    }

    |		lv_name_0_8=
	NEGATE
    {
        newLeafNode(lv_name_0_8, grammarAccess.getKeywordsAccess().getNameNEGATEKeyword_0_7());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordsRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_8, null);
	    }

    |		lv_name_0_9=
	DUP
    {
        newLeafNode(lv_name_0_9, grammarAccess.getKeywordsAccess().getNameDUPKeyword_0_8());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordsRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_9, null);
	    }

    |		lv_name_0_10=
	CALL
    {
        newLeafNode(lv_name_0_10, grammarAccess.getKeywordsAccess().getNameCALLKeyword_0_9());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordsRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_10, null);
	    }

)

)
)
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getKeywordsParserRuleCall_0()); 
    }
    this_Keywords_0=ruleKeywords
    {
        $current = $this_Keywords_0.current;
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getWordParserRuleCall_1()); 
    }
    this_Word_1=ruleWord
    {
        $current = $this_Word_1.current;
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionAccess().getLitLiteralParserRuleCall_2_0()); 
	    }
		lv_lit_2_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionRule());
	        }
       		set(
       			$current, 
       			"lit",
        		lv_lit_2_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_DOUBLE_1=RULE_DOUBLE    {
		$current.merge(this_DOUBLE_1);
    }

    { 
    newLeafNode(this_DOUBLE_1, grammarAccess.getLiteralAccess().getDOUBLETerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleWord
entryRuleWord returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getWordRule()); }
	 iv_ruleWord=ruleWord 
	 { $current=$iv_ruleWord.current; } 
	 EOF 
;

// Rule Word
ruleWord returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_name_0_1=RULE_ID
		{
			newLeafNode(lv_name_0_1, grammarAccess.getWordAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWordRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_1, 
        		"ID");
	    }

    |		lv_name_0_2=RULE_OPERATOR
		{
			newLeafNode(lv_name_0_2, grammarAccess.getWordAccess().getNameOPERATORTerminalRuleCall_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWordRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_2, 
        		"OPERATOR");
	    }

)

)
)
;





