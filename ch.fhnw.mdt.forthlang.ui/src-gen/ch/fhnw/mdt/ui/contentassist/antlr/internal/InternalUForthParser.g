/*
 * generated by Xtext
 */
parser grammar InternalUForthParser;

options {
	tokenVocab=InternalUForthLexer;
	superClass=AbstractInternalContentAssistParser;
	
}

@header {
package ch.fhnw.mdt.ui.contentassist.antlr.internal; 

import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import ch.fhnw.mdt.services.UForthGrammarAccess;

}

@members {
 
 	private UForthGrammarAccess grammarAccess;
 	
 	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
 	
 	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("CommercialAt", "'@'");
		tokenNameToValue.put("PlusSignExclamationMark", "'+!'");
		tokenNameToValue.put("DigitZeroLessThanSign", "'0<'");
		tokenNameToValue.put("DigitZeroEqualsSign", "'0='");
		tokenNameToValue.put("DigitOnePlusSign", "'1+'");
		tokenNameToValue.put("DigitOneHyphenMinus", "'1-'");
		tokenNameToValue.put("DigitTwoExclamationMark", "'2!'");
		tokenNameToValue.put("DigitTwoAsterisk", "'2*'");
		tokenNameToValue.put("DigitTwoSolidus", "'2/'");
		tokenNameToValue.put("DigitTwoCommercialAt", "'2@'");
		tokenNameToValue.put("R", "'>r'");
		tokenNameToValue.put("L", "'L!'");
		tokenNameToValue.put("L_1", "'L@'");
		tokenNameToValue.put("LD", "'LD'");
		tokenNameToValue.put("ON", "'ON'");
		tokenNameToValue.put("R_1", "'R@'");
		tokenNameToValue.put("ST", "'ST'");
		tokenNameToValue.put("T", "'T!'");
		tokenNameToValue.put("T_1", "'T@'");
		tokenNameToValue.put("R_2", "'r>'");
		tokenNameToValue.put("ST_1", "'+ST'");
		tokenNameToValue.put("DigitZeroLessThanSignGreaterThanSign", "'0<>'");
		tokenNameToValue.put("DigitTwoAsteriskAsterisk", "'2**'");
		tokenNameToValue.put("ABS", "'ABS'");
		tokenNameToValue.put("DEC", "'DEC'");
		tokenNameToValue.put("DUP", "'DUP'");
		tokenNameToValue.put("INC", "'INC'");
		tokenNameToValue.put("LLD", "'LLD'");
		tokenNameToValue.put("LST", "'LST'");
		tokenNameToValue.put("NIP", "'NIP'");
		tokenNameToValue.put("OFF", "'OFF'");
		tokenNameToValue.put("ROL", "'ROL'");
		tokenNameToValue.put("ROR", "'ROR'");
		tokenNameToValue.put("ROT", "'ROT'");
		tokenNameToValue.put("TLD", "'TLD'");
		tokenNameToValue.put("TST", "'TST'");
		tokenNameToValue.put("D0", "'d0='");
		tokenNameToValue.put("Jsr", "'jsr'");
		tokenNameToValue.put("U2", "'u2/'");
		tokenNameToValue.put("ROT_1", "'-ROT'");
		tokenNameToValue.put("DUP_1", "'2DUP'");
		tokenNameToValue.put("DUP_2", "'?DUP'");
		tokenNameToValue.put("DABS", "'DABS'");
		tokenNameToValue.put("DROL", "'DROL'");
		tokenNameToValue.put("DROP", "'DROP'");
		tokenNameToValue.put("DROR", "'DROR'");
		tokenNameToValue.put("FILL", "'FILL'");
		tokenNameToValue.put("MOVE", "'MOVE'");
		tokenNameToValue.put("OVER", "'OVER'");
		tokenNameToValue.put("PACK", "'PACK'");
		tokenNameToValue.put("SWAP", "'SWAP'");
		tokenNameToValue.put("TRUE", "'TRUE'");
		tokenNameToValue.put("TUCK", "'TUCK'");
		tokenNameToValue.put("DROP_1", "'2DROP'");
		tokenNameToValue.put("OVER_1", "'2OVER'");
		tokenNameToValue.put("SWAP_1", "'2SWAP'");
		tokenNameToValue.put("CELL", "'CELL+'");
		tokenNameToValue.put("CELL_1", "'CELL-'");
		tokenNameToValue.put("CLEAR", "'CLEAR'");
		tokenNameToValue.put("COUNT", "'COUNT'");
		tokenNameToValue.put("ERASE", "'ERASE'");
		tokenNameToValue.put("FALSE", "'FALSE'");
		tokenNameToValue.put("PLACE", "'PLACE'");
		tokenNameToValue.put("RDROP", "'RDROP'");
		tokenNameToValue.put("SHIFT", "'SHIFT'");
		tokenNameToValue.put("UNDER", "'UNDER'");
		tokenNameToValue.put("ASHIFT", "'ASHIFT'");
		tokenNameToValue.put("EXTEND", "'EXTEND'");
		tokenNameToValue.put("NEGATE", "'NEGATE'");
		tokenNameToValue.put("RCLEAR", "'RCLEAR'");
		tokenNameToValue.put("UNPACK", "'UNPACK'");
		tokenNameToValue.put("Create", "'create'");
		tokenNameToValue.put("ZExit", "'z-exit'");
		tokenNameToValue.put("DNEGATE", "'DNEGATE'");
		tokenNameToValue.put("NzExit", "'nz-exit'");
		tokenNameToValue.put("Branch", "'0=branch'");
		tokenNameToValue.put("Branch_1", "'?-branch'");
		tokenNameToValue.put("SBranch", "'s-branch'");
		tokenNameToValue.put("Branch_2", "'0<>branch'");
		tokenNameToValue.put("CARRYSET", "'CARRY-SET'");
		tokenNameToValue.put("NcBranch", "'nc-branch'");
		tokenNameToValue.put("NoBranch", "'no-branch'");
		tokenNameToValue.put("NsBranch", "'ns-branch'");
		tokenNameToValue.put("TorBranch", "'tor-branch'");
		tokenNameToValue.put("CARRY_RESET", "'CARRY_RESET'");
 	}
 	
    public void setGrammarAccess(UForthGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }

	@Override
    protected String getValueForTokenName(String tokenName) {
    	String result = tokenNameToValue.get(tokenName);
    	if (result == null)
    		result = tokenName;
    	return result;
    }
}




// Entry rule entryRuleForth
entryRuleForth 
:
{ before(grammarAccess.getForthRule()); }
	 ruleForth
{ after(grammarAccess.getForthRule()); } 
	 EOF 
;

// Rule Forth
ruleForth 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getForthAccess().getInstructionsAssignment()); }
(rule__Forth__InstructionsAssignment)*
{ after(grammarAccess.getForthAccess().getInstructionsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
(rule__Instruction__Alternatives)
{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCreate
entryRuleCreate 
:
{ before(grammarAccess.getCreateRule()); }
	 ruleCreate
{ after(grammarAccess.getCreateRule()); } 
	 EOF 
;

// Rule Create
ruleCreate 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getCreateAccess().getGroup()); }
(rule__Create__Group__0)
{ after(grammarAccess.getCreateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLITERAL
entryRuleLITERAL 
:
{ before(grammarAccess.getLITERALRule()); }
	 ruleLITERAL
{ after(grammarAccess.getLITERALRule()); } 
	 EOF 
;

// Rule LITERAL
ruleLITERAL 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getLITERALAccess().getAlternatives()); }
(rule__LITERAL__Alternatives)
{ after(grammarAccess.getLITERALAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntrinsicBranchWords
entryRuleIntrinsicBranchWords 
:
{ before(grammarAccess.getIntrinsicBranchWordsRule()); }
	 ruleIntrinsicBranchWords
{ after(grammarAccess.getIntrinsicBranchWordsRule()); } 
	 EOF 
;

// Rule IntrinsicBranchWords
ruleIntrinsicBranchWords 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIntrinsicBranchWordsAccess().getNameAssignment()); }
(rule__IntrinsicBranchWords__NameAssignment)
{ after(grammarAccess.getIntrinsicBranchWordsAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntrinsicStackWords
entryRuleIntrinsicStackWords 
:
{ before(grammarAccess.getIntrinsicStackWordsRule()); }
	 ruleIntrinsicStackWords
{ after(grammarAccess.getIntrinsicStackWordsRule()); } 
	 EOF 
;

// Rule IntrinsicStackWords
ruleIntrinsicStackWords 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameAssignment()); }
(rule__IntrinsicStackWords__NameAssignment)
{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntrinsicMemoryWords
entryRuleIntrinsicMemoryWords 
:
{ before(grammarAccess.getIntrinsicMemoryWordsRule()); }
	 ruleIntrinsicMemoryWords
{ after(grammarAccess.getIntrinsicMemoryWordsRule()); } 
	 EOF 
;

// Rule IntrinsicMemoryWords
ruleIntrinsicMemoryWords 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameAssignment()); }
(rule__IntrinsicMemoryWords__NameAssignment)
{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntrinsicArithmeticWords
entryRuleIntrinsicArithmeticWords 
:
{ before(grammarAccess.getIntrinsicArithmeticWordsRule()); }
	 ruleIntrinsicArithmeticWords
{ after(grammarAccess.getIntrinsicArithmeticWordsRule()); } 
	 EOF 
;

// Rule IntrinsicArithmeticWords
ruleIntrinsicArithmeticWords 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameAssignment()); }
(rule__IntrinsicArithmeticWords__NameAssignment)
{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWord
entryRuleWord 
:
{ before(grammarAccess.getWordRule()); }
	 ruleWord
{ after(grammarAccess.getWordRule()); } 
	 EOF 
;

// Rule Word
ruleWord 
    @init {
		int stackSize = keepStackSize();
    }
    :
(
{ before(grammarAccess.getWordAccess().getAlternatives()); }
(rule__Word__Alternatives)
{ after(grammarAccess.getWordAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Instruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getCreateParserRuleCall_0()); }
	ruleCreate
{ after(grammarAccess.getInstructionAccess().getCreateParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getFunctionParserRuleCall_1()); }
	ruleFunction
{ after(grammarAccess.getInstructionAccess().getFunctionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getWordParserRuleCall_2()); }
	ruleWord
{ after(grammarAccess.getInstructionAccess().getWordParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LITERAL__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLITERALAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getLITERALAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLITERALAccess().getDOUBLETerminalRuleCall_1()); }
	RULE_DOUBLE
{ after(grammarAccess.getLITERALAccess().getDOUBLETerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntrinsicBranchWords__NameAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntrinsicBranchWordsAccess().getNameJsrKeyword_0_0()); }

	Jsr 

{ after(grammarAccess.getIntrinsicBranchWordsAccess().getNameJsrKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getIntrinsicBranchWordsAccess().getName0BranchKeyword_0_1()); }

	Branch 

{ after(grammarAccess.getIntrinsicBranchWordsAccess().getName0BranchKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getIntrinsicBranchWordsAccess().getName0BranchKeyword_0_2()); }

	Branch_2 

{ after(grammarAccess.getIntrinsicBranchWordsAccess().getName0BranchKeyword_0_2()); }
)

    |(
{ before(grammarAccess.getIntrinsicBranchWordsAccess().getNameBranchKeyword_0_3()); }

	Branch_1 

{ after(grammarAccess.getIntrinsicBranchWordsAccess().getNameBranchKeyword_0_3()); }
)

    |(
{ before(grammarAccess.getIntrinsicBranchWordsAccess().getNameSBranchKeyword_0_4()); }

	SBranch 

{ after(grammarAccess.getIntrinsicBranchWordsAccess().getNameSBranchKeyword_0_4()); }
)

    |(
{ before(grammarAccess.getIntrinsicBranchWordsAccess().getNameNsBranchKeyword_0_5()); }

	NsBranch 

{ after(grammarAccess.getIntrinsicBranchWordsAccess().getNameNsBranchKeyword_0_5()); }
)

    |(
{ before(grammarAccess.getIntrinsicBranchWordsAccess().getNameNcBranchKeyword_0_6()); }

	NcBranch 

{ after(grammarAccess.getIntrinsicBranchWordsAccess().getNameNcBranchKeyword_0_6()); }
)

    |(
{ before(grammarAccess.getIntrinsicBranchWordsAccess().getNameNoBranchKeyword_0_7()); }

	NoBranch 

{ after(grammarAccess.getIntrinsicBranchWordsAccess().getNameNoBranchKeyword_0_7()); }
)

    |(
{ before(grammarAccess.getIntrinsicBranchWordsAccess().getNameTorBranchKeyword_0_8()); }

	TorBranch 

{ after(grammarAccess.getIntrinsicBranchWordsAccess().getNameTorBranchKeyword_0_8()); }
)

    |(
{ before(grammarAccess.getIntrinsicBranchWordsAccess().getNameZExitKeyword_0_9()); }

	ZExit 

{ after(grammarAccess.getIntrinsicBranchWordsAccess().getNameZExitKeyword_0_9()); }
)

    |(
{ before(grammarAccess.getIntrinsicBranchWordsAccess().getNameNzExitKeyword_0_10()); }

	NzExit 

{ after(grammarAccess.getIntrinsicBranchWordsAccess().getNameNzExitKeyword_0_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntrinsicStackWords__NameAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameCLEARKeyword_0_0()); }

	CLEAR 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameCLEARKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameDROPKeyword_0_1()); }

	DROP 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameDROPKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameDUPKeyword_0_2()); }

	DUP 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameDUPKeyword_0_2()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameDUPKeyword_0_3()); }

	DUP_2 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameDUPKeyword_0_3()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameSWAPKeyword_0_4()); }

	SWAP 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameSWAPKeyword_0_4()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameNIPKeyword_0_5()); }

	NIP 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameNIPKeyword_0_5()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameOVERKeyword_0_6()); }

	OVER 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameOVERKeyword_0_6()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameROTKeyword_0_7()); }

	ROT 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameROTKeyword_0_7()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameROTKeyword_0_8()); }

	ROT_1 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameROTKeyword_0_8()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameTUCKKeyword_0_9()); }

	TUCK 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameTUCKKeyword_0_9()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameUNDERKeyword_0_10()); }

	UNDER 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameUNDERKeyword_0_10()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getName2DROPKeyword_0_11()); }

	DROP_1 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getName2DROPKeyword_0_11()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getName2DUPKeyword_0_12()); }

	DUP_1 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getName2DUPKeyword_0_12()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getName2SWAPKeyword_0_13()); }

	SWAP_1 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getName2SWAPKeyword_0_13()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getName2OVERKeyword_0_14()); }

	OVER_1 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getName2OVERKeyword_0_14()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameRCLEARKeyword_0_15()); }

	RCLEAR 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameRCLEARKeyword_0_15()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameRKeyword_0_16()); }

	R_1 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameRKeyword_0_16()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameRKeyword_0_17()); }

	R_2 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameRKeyword_0_17()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameRKeyword_0_18()); }

	R 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameRKeyword_0_18()); }
)

    |(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameRDROPKeyword_0_19()); }

	RDROP 

{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameRDROPKeyword_0_19()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntrinsicMemoryWords__NameAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameLDKeyword_0_0()); }

	LD 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameLDKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameCommercialAtKeyword_0_1()); }

	CommercialAt 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameCommercialAtKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameSTKeyword_0_2()); }

	ST 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameSTKeyword_0_2()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameExclamationMarkKeyword_0_3()); }

	ExclamationMark 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameExclamationMarkKeyword_0_3()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getName2Keyword_0_4()); }

	DigitTwoCommercialAt 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getName2Keyword_0_4()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getName2Keyword_0_5()); }

	DigitTwoExclamationMark 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getName2Keyword_0_5()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameLLDKeyword_0_6()); }

	LLD 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameLLDKeyword_0_6()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameLKeyword_0_7()); }

	L_1 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameLKeyword_0_7()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameLSTKeyword_0_8()); }

	LST 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameLSTKeyword_0_8()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameLKeyword_0_9()); }

	L 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameLKeyword_0_9()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameTLDKeyword_0_10()); }

	TLD 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameTLDKeyword_0_10()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameTKeyword_0_11()); }

	T_1 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameTKeyword_0_11()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameTSTKeyword_0_12()); }

	TST 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameTSTKeyword_0_12()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameTKeyword_0_13()); }

	T 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameTKeyword_0_13()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameSTKeyword_0_14()); }

	ST_1 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameSTKeyword_0_14()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNamePlusSignExclamationMarkKeyword_0_15()); }

	PlusSignExclamationMark 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNamePlusSignExclamationMarkKeyword_0_15()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameINCKeyword_0_16()); }

	INC 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameINCKeyword_0_16()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameDECKeyword_0_17()); }

	DEC 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameDECKeyword_0_17()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameONKeyword_0_18()); }

	ON 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameONKeyword_0_18()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameOFFKeyword_0_19()); }

	OFF 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameOFFKeyword_0_19()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameERASEKeyword_0_20()); }

	ERASE 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameERASEKeyword_0_20()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameFILLKeyword_0_21()); }

	FILL 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameFILLKeyword_0_21()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameCOUNTKeyword_0_22()); }

	COUNT 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameCOUNTKeyword_0_22()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameMOVEKeyword_0_23()); }

	MOVE 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameMOVEKeyword_0_23()); }
)

    |(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNamePLACEKeyword_0_24()); }

	PLACE 

{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNamePLACEKeyword_0_24()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntrinsicArithmeticWords__NameAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNamePlusSignKeyword_0_0()); }

	PlusSign 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNamePlusSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameHyphenMinusKeyword_0_1()); }

	HyphenMinus 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameHyphenMinusKeyword_0_1()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameAsteriskKeyword_0_2()); }

	Asterisk 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameAsteriskKeyword_0_2()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameSolidusKeyword_0_3()); }

	Solidus 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameSolidusKeyword_0_3()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getName2Keyword_0_4()); }

	DigitTwoAsterisk 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getName2Keyword_0_4()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getName2Keyword_0_5()); }

	DigitTwoSolidus 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getName2Keyword_0_5()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameU2Keyword_0_6()); }

	U2 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameU2Keyword_0_6()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameRORKeyword_0_7()); }

	ROR 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameRORKeyword_0_7()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameDRORKeyword_0_8()); }

	DROR 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameDRORKeyword_0_8()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameROLKeyword_0_9()); }

	ROL 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameROLKeyword_0_9()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameDROLKeyword_0_10()); }

	DROL 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameDROLKeyword_0_10()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNamePACKKeyword_0_11()); }

	PACK 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNamePACKKeyword_0_11()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameUNPACKKeyword_0_12()); }

	UNPACK 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameUNPACKKeyword_0_12()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameSHIFTKeyword_0_13()); }

	SHIFT 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameSHIFTKeyword_0_13()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameASHIFTKeyword_0_14()); }

	ASHIFT 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameASHIFTKeyword_0_14()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getName2Keyword_0_15()); }

	DigitTwoAsteriskAsterisk 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getName2Keyword_0_15()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getName0Keyword_0_16()); }

	DigitZeroEqualsSign 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getName0Keyword_0_16()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getName0Keyword_0_17()); }

	DigitZeroLessThanSignGreaterThanSign 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getName0Keyword_0_17()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getName0Keyword_0_18()); }

	DigitZeroLessThanSign 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getName0Keyword_0_18()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameD0Keyword_0_19()); }

	D0 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameD0Keyword_0_19()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameNEGATEKeyword_0_20()); }

	NEGATE 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameNEGATEKeyword_0_20()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameDNEGATEKeyword_0_21()); }

	DNEGATE 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameDNEGATEKeyword_0_21()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getName1Keyword_0_22()); }

	DigitOnePlusSign 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getName1Keyword_0_22()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getName1Keyword_0_23()); }

	DigitOneHyphenMinus 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getName1Keyword_0_23()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameTRUEKeyword_0_24()); }

	TRUE 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameTRUEKeyword_0_24()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameFALSEKeyword_0_25()); }

	FALSE 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameFALSEKeyword_0_25()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameCELLKeyword_0_26()); }

	CELL 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameCELLKeyword_0_26()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameCELLKeyword_0_27()); }

	CELL_1 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameCELLKeyword_0_27()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameCARRY_RESETKeyword_0_28()); }

	CARRY_RESET 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameCARRY_RESETKeyword_0_28()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameCARRYSETKeyword_0_29()); }

	CARRYSET 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameCARRYSETKeyword_0_29()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameABSKeyword_0_30()); }

	ABS 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameABSKeyword_0_30()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameDABSKeyword_0_31()); }

	DABS 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameDABSKeyword_0_31()); }
)

    |(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameEXTENDKeyword_0_32()); }

	EXTEND 

{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameEXTENDKeyword_0_32()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Word__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWordAccess().getIntrinsicBranchWordsParserRuleCall_0()); }
	ruleIntrinsicBranchWords
{ after(grammarAccess.getWordAccess().getIntrinsicBranchWordsParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getWordAccess().getIntrinsicStackWordsParserRuleCall_1()); }
	ruleIntrinsicStackWords
{ after(grammarAccess.getWordAccess().getIntrinsicStackWordsParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getWordAccess().getIntrinsicMemoryWordsParserRuleCall_2()); }
	ruleIntrinsicMemoryWords
{ after(grammarAccess.getWordAccess().getIntrinsicMemoryWordsParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getWordAccess().getIntrinsicArithmeticWordsParserRuleCall_3()); }
	ruleIntrinsicArithmeticWords
{ after(grammarAccess.getWordAccess().getIntrinsicArithmeticWordsParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getWordAccess().getNameAssignment_4()); }
(rule__Word__NameAssignment_4)
{ after(grammarAccess.getWordAccess().getNameAssignment_4()); }
)

    |(
{ before(grammarAccess.getWordAccess().getNameAssignment_5()); }
(rule__Word__NameAssignment_5)
{ after(grammarAccess.getWordAccess().getNameAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getColonKeyword_0()); }

	Colon 

{ after(grammarAccess.getFunctionAccess().getColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getWordParserRuleCall_1()); }
	ruleWord
{ after(grammarAccess.getFunctionAccess().getWordParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getWordsAssignment_2()); }
(rule__Function__WordsAssignment_2)*
{ after(grammarAccess.getFunctionAccess().getWordsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getSemicolonKeyword_3()); }

	Semicolon 

{ after(grammarAccess.getFunctionAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Create__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create__Group__0__Impl
	rule__Create__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreateAccess().getCreateKeyword_0()); }

	Create 

{ after(grammarAccess.getCreateAccess().getCreateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Create__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create__Group__1__Impl
	rule__Create__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreateAccess().getNameAssignment_1()); }
(rule__Create__NameAssignment_1)
{ after(grammarAccess.getCreateAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Create__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreateAccess().getGroup_2()); }
(rule__Create__Group_2__0)*
{ after(grammarAccess.getCreateAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Create__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create__Group_2__0__Impl
	rule__Create__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreateAccess().getLitAssignment_2_0()); }
(rule__Create__LitAssignment_2_0)
{ after(grammarAccess.getCreateAccess().getLitAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Create__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Create__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreateAccess().getCommaKeyword_2_1()); }

	Comma 

{ after(grammarAccess.getCreateAccess().getCommaKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Forth__InstructionsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForthAccess().getInstructionsInstructionParserRuleCall_0()); }
	ruleInstruction{ after(grammarAccess.getForthAccess().getInstructionsInstructionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__WordsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getWordsWordParserRuleCall_2_0()); }
	ruleWord{ after(grammarAccess.getFunctionAccess().getWordsWordParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Create__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreateAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getCreateAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Create__LitAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreateAccess().getLitLITERALParserRuleCall_2_0_0()); }
	ruleLITERAL{ after(grammarAccess.getCreateAccess().getLitLITERALParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntrinsicBranchWords__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntrinsicBranchWordsAccess().getNameAlternatives_0()); }
(rule__IntrinsicBranchWords__NameAlternatives_0)
{ after(grammarAccess.getIntrinsicBranchWordsAccess().getNameAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntrinsicStackWords__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntrinsicStackWordsAccess().getNameAlternatives_0()); }
(rule__IntrinsicStackWords__NameAlternatives_0)
{ after(grammarAccess.getIntrinsicStackWordsAccess().getNameAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntrinsicMemoryWords__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntrinsicMemoryWordsAccess().getNameAlternatives_0()); }
(rule__IntrinsicMemoryWords__NameAlternatives_0)
{ after(grammarAccess.getIntrinsicMemoryWordsAccess().getNameAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntrinsicArithmeticWords__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameAlternatives_0()); }
(rule__IntrinsicArithmeticWords__NameAlternatives_0)
{ after(grammarAccess.getIntrinsicArithmeticWordsAccess().getNameAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Word__NameAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWordAccess().getNameLITERALParserRuleCall_4_0()); }
	ruleLITERAL{ after(grammarAccess.getWordAccess().getNameLITERALParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Word__NameAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWordAccess().getNameIDTerminalRuleCall_5_0()); }
	RULE_ID{ after(grammarAccess.getWordAccess().getNameIDTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


